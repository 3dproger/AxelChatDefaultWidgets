{"version":3,"sources":["AnimatedDummyTextView.jsx","MessagesListView.jsx","ServicesListView.jsx","CoreView.jsx","index.js"],"names":["IndicatorType","AnimatedDummyTextView","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","type","react_default","a","createElement","spin","style","marginRight","indicator","LoadingOutlined","fontSize","className","text","alt","src","imageSrc","React","Component","defaultProps","ContentView","content","data","url","href","MessageView","_React$Component2","_this","call","state","needToHide","hideTimeout","setTimeout","setState","message","author","forcedColors","backgroundColor","bodyBackground","visibility","serviceId","leftBadges","map","badgeUrl","idx","customBackgroundColor","length","color","name","rightBadges","contents","MessagesListView_ContentView","MessagesListView","_React$Component3","_getPrototypeOf2","_this2","_len","args","Array","_key","concat","scrollToBottom","undefined","messagesEnd","scrollIntoView","behavior","_this3","messages","AnimatedDummyTextView_AnimatedDummyTextView","display","justifyContent","id","MessagesListView_MessageView","float","clear","ref","el","ServiceView","service","enabled","type_id","viewers","toLocaleString","ServicesListView","services","ServicesListView_ServiceView","appState","CoreView","_ReadyState$CONNECTIN","_useSearchParams","useSearchParams","searchParams","slicedToArray","_useState","useState","Map","authorsMap","_useState3","_useState4","setMessages","_useState5","_useState6","messagesMap","_useState7","_useState8","selectedMessages","setSelectedMessages","_useState9","_useState10","setServices","_useState11","_useState12","_React$useState","updateState","forceUpdate","useCallback","_useWebSocket","useWebSocket","onOpen","sendMessage","JSON","stringify","client","packageJson","version","info","get","shouldReconnect","closeEvent","lastMessage","readyState","useEffect","protocolMessage","parse","protocolMessageType","prev","_prev","toConsumableArray","_step","_iterator","_createForOfIteratorHelper","s","n","done","set","err","e","f","needToDeleteCount","i","shift","delete","_step2","_iterator2","prevMessage","assign","_step3","_iterator3","authorId","author_id","has","values","console","error","connectionStatus","defineProperty","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","widgetType","MessagesListView_MessagesListView","ServicesListView_ServicesListView","ReactDOM","createRoot","document","getElementById","render","react_router_dom_dist","CoreView_CoreView"],"mappings":"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","file":"static/js/main.75c84d1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nexport const IndicatorType = {\r\n    Image: \"Image\",\r\n    Spin: \"Spin\",\r\n};\r\n\r\nexport class AnimatedDummyTextView extends React.Component {\r\n    static propTypes = {\r\n        type: PropTypes.string,\r\n        text: PropTypes.string.isRequired,\r\n        imageSrc: PropTypes.string.isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        type: IndicatorType.Spin,\r\n        text: \"TEXT\",\r\n        imageSrc: \"./images/tick.svg\",\r\n    }\r\n\r\n    render() {\r\n        if (this.props.type === IndicatorType.Spin) {\r\n            return (\r\n                <span>\r\n                    <Spin style={{\"marginRight\": \"4px\"}} indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />}/>\r\n                    <span className=\"authorName\">{this.props.text}</span>\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <span>\r\n                <img className=\"badgeServiceIcon\" alt=\"\" src={this.props.imageSrc}/>\r\n                <span className=\"authorName\">{this.props.text}</span>\r\n            </span>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AnimatedDummyTextView, IndicatorType } from \"./AnimatedDummyTextView\";\r\nimport { Avatar, Typography } from \"antd\";\r\n\r\nclass ContentView extends React.Component {\r\n  static propTypes = {\r\n    content: PropTypes.object.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    content: null,\r\n  };\r\n\r\n  render() {\r\n    const content = this.props.content;\r\n    if (!content) {\r\n      return <div>null</div>;\r\n    }\r\n\r\n    const type = content.type;\r\n    const data = content.data;\r\n\r\n    if (type === \"text\") {\r\n      const text = data.text;\r\n      return <span className=\"text\">{text}</span>;\r\n    } else if (type === \"image\") {\r\n      return <img className=\"imageContent\" alt=\"\" src={data.url}></img>;\r\n    } else if (type === \"hyperlink\") {\r\n      return (\r\n        <span> <a className=\"hyperlinkContent\" href={data.url}>\r\n          <span>{data.text}</span>\r\n        </a> </span>\r\n      );\r\n    }\r\n\r\n    return <div>Unknown content type '{type}'</div>;\r\n  }\r\n}\r\n\r\nexport class MessageView extends React.Component {\r\n  static propTypes = {\r\n    message: PropTypes.object.isRequired,\r\n    hideTimeout: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    message: null,\r\n    hideTimeout: 0,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      needToHide: false,\r\n    };\r\n\r\n    if (props.hideTimeout > 0)\r\n    {\r\n      setTimeout(() => \r\n        {\r\n          this.setState({\r\n            needToHide: true,\r\n          });\r\n        }, props.hideTimeout)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const message = this.props.message;\r\n    if (!message) {\r\n      return <div>Message is null</div>;\r\n    }\r\n\r\n    const author = message.author;\r\n    if (!author) {\r\n      return <div>Author is null</div>;\r\n    }\r\n\r\n    const forcedColors = message.forcedColors;\r\n    //console.log(message)\r\n\r\n    return (\r\n      <span className={\"message\" + (this.state.needToHide ? \" hiddenFadeOut\" : \"\")} style={{\"backgroundColor\": forcedColors.bodyBackground, 'visibility': this.state.visibility}}>\r\n        <span className=\"badges\">\r\n          <img\r\n              className=\"badgeServiceIcon\"\r\n              alt=\"badge service icon\"\r\n              src={\"./images/\" + author.serviceId + \"-icon.svg\"}\r\n          />\r\n\r\n          {author.leftBadges.map((badgeUrl, idx) => (\r\n            <img key={idx} className=\"badgeLeft\" alt=\"\" src={badgeUrl}></img>\r\n          ))}\r\n        </span>\r\n\r\n        <span\r\n          className={\"authorName\" + (author.customBackgroundColor.length  > 0 ? \" authorNameCustomBackgroundColor\" : \"\")}\r\n          style={{\r\n            \"color\": author.color,\r\n            \"backgroundColor\": author.customBackgroundColor,\r\n          }}>\r\n            {author.name}\r\n        </span>\r\n\r\n        {author.rightBadges.map((badgeUrl, idx) => (\r\n          <img key={idx} className=\"badgeRight\" alt=\"\" src={badgeUrl}></img>\r\n        ))}\r\n\r\n        <span className=\"authorMessageContentSeparator\"></span>\r\n\r\n        <span className=\"messageContents\">\r\n          {message.contents.map((content, idx) => (\r\n            <ContentView key={idx} content={content} />\r\n          ))}\r\n        </span>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport class MessagesListView extends React.Component {\r\n  static propTypes = {\r\n    messages: PropTypes.array.isRequired,\r\n    hideTimeout: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    messages: [],\r\n    hideTimeout: 0,\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    if (this.messagesEnd !== undefined && this.messagesEnd !== null) {\r\n      this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.messages.length === 0) {\r\n      return (\r\n        <AnimatedDummyTextView\r\n          type={IndicatorType.Image}\r\n          text=\"Connected!\"\r\n          imageSrc=\"./images/tick.svg\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"messagesListView\">\r\n          {this.props.messages.map((message) => (\r\n            <div\r\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n              key={message.id}\r\n            >\r\n              <MessageView\r\n                message={message}\r\n                hideTimeout={this.props.hideTimeout}\r\n              />\r\n            </div>\r\n          ))}\r\n\r\n          <div\r\n            style={{ float: \"left\", clear: \"both\" }}\r\n            ref={(el) => {\r\n              this.messagesEnd = el;\r\n            }}\r\n          ></div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css'\r\n\r\nexport class ServiceView extends React.Component {\r\n    static propTypes = {\r\n        service: PropTypes.object.isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        service: null,\r\n    }\r\n    \r\n    render() {\r\n        const service = this.props.service;\r\n\r\n        if (!service) {\r\n            return (\r\n                <div>null</div>\r\n            )\r\n        }\r\n\r\n        if (!service.enabled) {\r\n            return (\r\n                <span></span>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <span className=\"serviceIndicator\">\r\n                <img className=\"badgeServiceIcon\" alt={service.type_id} src={\"./images/\" + service.type_id + \"-icon.svg\"}/>\r\n                <span className=\"text\">{service.viewers !== -1 ? service.viewers.toLocaleString() : \"\"}</span>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport class ServicesListView extends React.Component {\r\n    static propTypes = {\r\n        services: PropTypes.array.isRequired,\r\n        appState: PropTypes.object.isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        services: [],\r\n        appState: null,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.services.map((service, idx) => (\r\n                    <ServiceView key={idx} service={service} />\r\n                ))}\r\n                <span className=\"serviceIndicator\">\r\n                    <img className=\"badgeServiceIcon\" alt=\"viewers-count\" src={\"./images/person.svg\"}/>\r\n                    <span className=\"text\">{this.props.appState.viewers > -1 ? this.props.appState.viewers.toLocaleString() : \"?\"}</span>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { MessagesListView } from './MessagesListView';\r\nimport { ServicesListView } from './ServicesListView'\r\nimport { AnimatedDummyTextView, IndicatorType } from './AnimatedDummyTextView'\r\nimport packageJson from '../package.json';\r\n\r\nexport const CoreView = () => {\r\n    const [searchParams] = useSearchParams();\r\n    const [authorsMap] = useState(new Map());\r\n    const [messages, setMessages] = useState([]);\r\n    const [messagesMap, setMessagesMap] = useState(new Map());\r\n    const [selectedMessages, setSelectedMessages] = useState([]);\r\n    const [services, setServices] = useState([]);\r\n    const [appState, setState] = useState({\r\n        viewers: -1,\r\n    });\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n    const { sendMessage, lastMessage, readyState } = useWebSocket('ws://localhost:8355', {\r\n        onOpen: () => {\r\n            //console.log('Opened socket');\r\n            setMessages([]);\r\n            sendMessage(JSON.stringify({\r\n                type: \"HELLO\",\r\n                data: {\r\n                    client: {\r\n                        type: \"MAIN_WEBSOCKETCLIENT\",\r\n                        name: packageJson.name,\r\n\t\t\t\t\t\tversion: packageJson.version,\r\n                    },\r\n                    info: {\r\n\t\t\t\t\t\ttype: \"WIDGET\",\r\n                        name: searchParams.get(\"widget\"),\r\n                    },\r\n                },\r\n            }));\r\n        },\r\n        shouldReconnect: (closeEvent) => true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!lastMessage) {\r\n            return;\r\n        }\r\n\r\n        const protocolMessage = JSON.parse(lastMessage.data);\r\n        //console.log(protocolMessage);\r\n        const protocolMessageType = protocolMessage.type;\r\n        const data = protocolMessage.data;\r\n\r\n        if (protocolMessageType === \"NEW_MESSAGES_RECEIVED\") {\r\n            setMessages((prev) => {\r\n                prev = prev.concat(...data.messages);\r\n\r\n                for (const message of data.messages) {\r\n                    messagesMap.set(message.id, message)\r\n                    const author = message.author;\r\n                    authorsMap.set(author.id, author);\r\n                }\r\n\r\n                const MaxMessagesCount = 70;\r\n\r\n                if (prev.length > MaxMessagesCount) {\r\n                    const needToDeleteCount = prev.length - MaxMessagesCount;\r\n\r\n                    for (let i = 0; i < needToDeleteCount; i++) {\r\n                        const message = prev.shift();\r\n                        messagesMap.delete(message.id);\r\n                    }\r\n                }\r\n\r\n                return prev;\r\n            });\r\n        }\r\n        else if (protocolMessageType === \"STATES_CHANGED\") {\r\n            setServices(data.services);\r\n            setState(data);\r\n        }\r\n        else if (protocolMessageType === \"MESSAGES_CHANGED\") {\r\n            //console.log(protocolMessage);\r\n            for (const message of data.messages) {\r\n                let prevMessage = messagesMap.get(message.id);\r\n                if (typeof(prevMessage) !== \"undefined\" && prevMessage !== null) {\r\n                    //console.log(\"changed \", prevMessage, \" to \", message);\r\n                    Object.assign(prevMessage, message);\r\n                }\r\n            }\r\n            forceUpdate();\r\n        }\r\n        else if (protocolMessageType === \"MESSAGES_SELECTED\") {\r\n            setSelectedMessages((prev) => {\r\n                for (const message of data.messages) {\r\n                    const author = message.author;\r\n                    authorsMap.set(author.id, author);\r\n                }\r\n\r\n                return data.messages;\r\n            });\r\n        }\r\n        else if (protocolMessageType === \"AUTHOR_VALUES_CHANGED\") {\r\n            const authorId = data.author_id;\r\n\r\n            if (authorsMap.has(authorId)) {\r\n                var author = authorsMap.get(authorId);\r\n                for (var key in data.values) {\r\n                    author[key] = data.values[key];\r\n                }\r\n            }\r\n        }\r\n        else if (protocolMessageType === \"CLEAR_MESSAGES\") {\r\n            setMessages((prev) => {\r\n                messagesMap.clear();\r\n                return [];\r\n            });\r\n        }\r\n        else if (protocolMessageType === \"HELLO\") {\r\n            // ignore\r\n        }\r\n        else {\r\n            console.error(\"Unknown message type '\" + protocolMessageType + \"', protocol message = '\" + protocolMessage + \"'\");\r\n        }\r\n\r\n    }, [lastMessage, setMessages]);\r\n    \r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: 'Connecting...',\r\n        [ReadyState.OPEN]: 'Open',\r\n        [ReadyState.CLOSING]: 'Closing',\r\n        [ReadyState.CLOSED]: 'Closed. Please launch the AxelChat or restart the widget...',\r\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\r\n    }[readyState];\r\n\r\n    if (readyState === ReadyState.OPEN) {\r\n        const widgetType = searchParams.get(\"widget\");\r\n\r\n        if (widgetType === \"messages\") {\r\n            return (<MessagesListView messages={messages} hideTimeout={0} />);\r\n        }\r\n        else if (widgetType === \"selected-messages\") {\r\n            return (<MessagesListView messages={selectedMessages} hideTimeout={0} />);\r\n        }\r\n        else if (widgetType === \"states\") {\r\n            return (<ServicesListView services={services} appState={appState} />);\r\n        }\r\n        else {\r\n            return (<span className=\"errorText\">Error: unknown widget</span>);\r\n        }\r\n    }\r\n    else {\r\n        return (\r\n            <AnimatedDummyTextView type={readyState === ReadyState.CONNECTING ? IndicatorType.Spin : IndicatorType.Image} text={connectionStatus} imageSrc=\"./images/error-alt-svgrepo-com.svg\"/>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CoreView;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './styles.css';\r\nimport { CoreView } from './CoreView';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <Router>\r\n    <CoreView />\r\n  </Router>\r\n);\r\n"],"sourceRoot":""}